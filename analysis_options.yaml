# All lint rules are activated in all_lint_rules.yaml
# In this file only the needed lint rules are disabled
# Roughly based on Mike and Ale's approach explained in details here, with comments:
# https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c
include: all_lint_rules.yaml

########## formatter ##########
formatter:
  page_width: 100

########## analyzer ##########
analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "test/.test_coverage.dart"
    - "bin/cache/**"
    - "lib/generated_plugin_registrant.dart"

  # More information at:
  # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
  language:
    # enforce explicit cast from dynamic to a more specific type
    strict-casts: true
    # never choose dynamic type when type can't be determined
    strict-inference: true
    # never choose dynamic type when type can't be determined omitting the type arguments
    strict-raw-types: true

  errors:
    # When importing all_lint_rules.yaml, some rules conflict, and we resolve them in this file;
    # but this error create warnings about them, so we ignore them. To see the conflicts,
    # temporarily set this error to 'warning'
    included_file_warning: ignore

    # Error about missing required params
    missing_required_param: error

    # Error about missing returns
    missing_return: error

    # Warn about reassigning references to parameters of functions or methods
    parameter_assignments: warning

    # Allow TODOs
    todo: ignore

########## linter ##########
linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # too strict, makes code too verbose
    always_specify_types: false
    # incompatible with prefer_relative_imports
    always_use_package_imports: false
    # incompatible with prefer_final_parameters
    avoid_final_parameters: false
    # do not avoid types for function expression params
    avoid_types_on_closure_parameters: false
    # too strict, makes code too verbose
    diagnostic_describe_all_properties: false
    # incompatible with page_width: 100
    lines_longer_than_80_chars: false
    # incompatible with prefer_single_quotes
    prefer_double_quotes: false
    # too strict, preferred but no need to enforce it
    prefer_expression_function_bodies: false
    # too strict, even if it could make sense to enforce documentation
    public_member_api_docs: false
    # incompatible with omit_local_variable_types
    specify_nonobvious_local_variable_types: false
    # incompatible with prefer_final_locals
    unnecessary_final: false
